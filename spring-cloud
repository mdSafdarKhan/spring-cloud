1. Spring Cloud Config Server: It is a spring boot project which act as a centralized config server. It could be backed by local configuration file or git. To get started with config server below is the steps.
		
		b. Create a spring boot project with "Config Server" dependency.
		
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-config-server</artifactId>
				</dependency>
				
		c. In Spring boot main class apply @EnableConfigServer annotation.
		
		d. Define git path in "application.yml" file like below.
				
				spring:
				  cloud:
					config:
					  server:
						git:
						  uri: https://github.com/mdSafdarKhan/spring-cloud.git
						  (Optional) username: tacocloud 
						  (Optional) password: s3cr3tP455w0rd
						  
		Note: Git uri is the git repository clone uri, not the repository web url. username and password properties are optional. If your git repository is secured, then apply username and password.
				
		e. Consuming spring cloud config server through another spring boot project (as client). 
				
				1. First of all create a spring boot project with below dependency.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
						</dependency>
				
				2. Then define application name in "application.yml" file and "spring cloud config server url" like below.
				
						spring:
						  cloud:
							config:
							  uri: http://localhost:8888
						  application:
							name: master-client-1
		
				3. On your git repository define a file name as "master-client-1.yml". Then define whatever properties you want for this application. Remember the git file name should be same as the application name defined in above step.
		
2. Eureka Server or Discovery Server:
		a. This is also a spring boot project. It is used to register many running spring boot microservies at one place. By this microservices can talk to each other through a logical DOMAIN names not by the IP and PORT addresses. To start with Eureka server do the following things.
		
				1. First of all create a spring boot project with below dependency.
				
					<dependency>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
					</dependency>
					
				2. Then use @EnableEurekaServer annotation on project main class to make it Eureka server.
				
				Note: There are few properties available for Eureka server for cluster environment like "fetch-registry", "register-with-eureka", "service-url:defaultZone", etc.
				
				3. Then start the project and visit http://localhost:8761/ url to check whether it is working or not!
				
				4. Now you are ready to register your spring boot microservice by adding below dependency and mentioning below properties in "application.yml" file.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
						</dependency>
						
						and
						
						@EnableDiscoveryClient
						
						and
						
						eureka:
						  client:
							service-url:
							  defaultZone: http://localhost:8761/eureka/

3. Hystrix
		
		a. It is also a spring boot project. It is used to provide a graceful fault tolerant mechanism on APIs. To get started with Hystrix below is the steps.
		
				1. First of all add below dependency into your spring boot project.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
						</dependency>
						
				2.  The annotate your main class with @EnableHystrix.
				
				3. Then use @HystrixCommand annotation to your REST API like below.
				
						@HystrixCommand(fallbackMethod = "fallback", 
														commandProperties = 
																	@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000"))
																	
				Note: The above code simply stating that if API resonse is more than 1000ms then call a method with name "fallback".
4. Zuul
		a. It is also a spring boot application. It is used to route the request. To get started with follow the below steps.
		
				1. First of all create a spring boot project and add the below dependency.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
						</dependency>
						
				2. Next declare @EnableZuulProxy annotation in your main class.
				
				3. Then add below code to route the request. You can modify the below code as per your requirements.
				
						zuul:
						  routes:
							products:
							  path: /api/** 
							  url: http://localhost:8080
5. Sleuth
		a. It is used to trace the application logs while executing APIs from one system to another. You will need atleast 2 spring boot projects to test it. To get started with this follow the below steps.
		
				1. First of all add the below dependency in your both spring boot project.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-sleuth</artifactId>
						</dependency>
				
				2. Add logs at relevant places in your both spring boot application as given below.
				
						private static Logger log = LoggerFactory.getLogger(MyController.class);
						
				3. Observation from generated logs. You will find the logs something like given below.
				
						...[master-client-2,9bfa345e456d4627,9bfa345e456d4627,true]...
						...[master-client-1,2b07c7b307df9327,2b07c7b307df9327,true]...
						
				Note: Sleuth generated logs are in square bracket with 4 octants. First octant describes the Application name. Second octant describes the Trace ID which is unique for each spring boot application. Third octant describes the Span ID which is common throughout the propagation of http request. Fourth octant describes that whether the logs where Exported to Zipkin or not.
		
6. Feign Client
		
		a. It is a declarative REST client. To test feign client you will need atleast 2 spring boot project (One acting as source and second acting as target). To get started with feign follow the below steps.
		
				1. First of all add below dependency in your source project.
				
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-feign</artifactId>
							<version>LATEST</version>
						</dependency>
						
				2. Then declare @EnableFeignClients annotation to your main class.
				
				3. Then create an Interface acting as a collection of services and annotate it with @FeignClient annotation as given below.
				
						@FeignClient(name = "cart-service")
						public interface CartService {
							
							@GetMapping("/cart/1588695183498")
							public Cart getCart();
						}
				
				Note: The "name" attribute in above code is the target application name which is registered with eureka server. And url inside the @GetMapping is the resource uri. Then you autowired the above CartService anywhere and can use it.

7. Actuator
		Actuator helps in knowing the status of currently running application. There are many matrix to describes the various aspects of a running spring boot project. To get started with actuator follow below steps.
		
				1. First of all add below dependency to your spring boot project.
				
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-actuator</artifactId>
						</dependency>
						
				2. Then explore the below application urls.
				
						/actuator/health
						/actuator/info
						/actuator/env
						
				Note: You may have noticed that only the /health and /info endpoints are enabled by default.
						
				3. Example of Configuring Actuator.
				
						management:
						  endpoints:
							web:
							  base-path: /customPath
							  exposure:
								include: "*"
				
				4. Testing the endpoints.
				
						http://localhost:8081/customPath/info
						http://localhost:8081/customPath/health
						http://localhost:8081/customPath/env